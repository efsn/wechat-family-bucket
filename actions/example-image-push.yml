name: Docker

on:
  push:
    # publish `master` as Docker `latest` image
    branches:
      - master

    # publish `v0.0.1` tags as release
    tags:
      - v*
  # run tests for any PRs
  pull_request:

env:
  # todo: change variable to your images's name
  IMAGE_NAME: image

jobs:
  # run tests
  # see also: https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run sut
          else
            docker build . --file Dockerfile
          fi
  push:
    # ensure test job passes before pushing image
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v1
      - name: build image
        run: docker build . --file Dockerfile --tag image
      - name: log into registry
        run echo "${{secrets.GITHUB_TOKEN}}" | docker login docker.pkg.github.com -u ${{github.actor}} --password-stdin
      - name: push name
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag image $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION